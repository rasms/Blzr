@page "/login"
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<div style="max-width: 400px;">
    <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
<MudCard>
<MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Blazor WebAssembly JWT Login Example</MudText>
        </CardHeaderContent>
</MudCardHeader>
    <MudCardContent>
                    
                        <DataAnnotationsValidator />
                        <MudInput @bind-Value="model.Username" T="string" Placeholder="Username"  />
                        <ValidationMessage For="@(() => model.Username)" /><br/>
                        
                        <MudInput @bind-Value="model.Password" T="string" InputType="InputType.Password" Placeholder="Password" />
                        <ValidationMessage For="@(() => model.Password)" /><br/>
                      @if (!string.IsNullOrEmpty(error)) {
                                                                  <div class="alert alert-danger mt-3 mb-0">@error</div>
                                                              }
         
                                 
                     
                    
    </MudCardContent>
     <MudCardActions>
         <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
             
             @if (loading)
             {
                 <span class="spinner-border spinner-border-sm mr-1"></span>
             }
             Login
         </MudButton>
          
        </MudCardActions>
    </MudCard>
</EditForm>
</div>

@code {
    private Model model = new Model();
    private bool loading;
    private string error;

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.Login(model.Username, model.Password);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

    private class Model
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}