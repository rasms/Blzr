@page "/fetchdata"
@attribute [Authorize]
@inject ICustomerService CustomerService
@inject ISnackbar Snackbar
@using BlzrModels.Models;
@using System.Windows.Input

<h1>AdventureWorks Customers</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_customers == null)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="1024px" Height="420px" />
}
else
{
    
    <MudTable Items="@_customers" Hover="true" Dense="true" Striped="true" RowsPerPage="50" Filter="new Func<Customer,bool>(FilterFunc)" @bind-SelectedItem="_selectedItem" SortLabel="Sort By" CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => EditCustomer(_selectedItem.CustomerId))">
    <ToolBarContent>
            <MudText Typo="Typo.h6">AdventureWorks Customers</MudText>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.CustomerId)">CustomerId</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.FirstName)">Firstname</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Customer, object>(x=>x.LastName)">Lastname</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.EmailAddress)">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.CompanyName)">Company</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="CustomerId">@context.CustomerId</MudTd>
            <MudTd DataLabel="Firstname">@context.FirstName</MudTd>
            <MudTd DataLabel="Lastname">@context.LastName</MudTd>
            <MudTd DataLabel="Email">@context.EmailAddress</MudTd>
            <MudTd DataLabel="Company">@context.CompanyName</MudTd>
        </RowTemplate>
         <RowEditingTemplate>
                <MudTd DataLabel="CustomerId">@context.CustomerId</MudTd>
                <MudTd DataLabel="Firstname">
                    <MudTextField @bind-Value="@context.FirstName" Required />
                </MudTd>
                <MudTd DataLabel="Lastname">
                    <MudTextField @bind-Value="@context.LastName" Required />
                </MudTd>
                <MudTd DataLabel="Email">
                    <MudTextField @bind-Value="@context.EmailAddress" Required />
                </MudTd>
                <MudTd DataLabel="Company">
                    <MudTextField @bind-Value="@context.CompanyName" />
                </MudTd>
            </RowEditingTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[]{50, 100}" />
        </PagerContent>
    </MudTable>
    
}

@code {
    
    private string _searchString = "";
    private Customer _selectedItem = null;
    //private BindingCommand _editCustomerCommand;
    private HashSet<Customer> _selectedItems = new HashSet<Customer>();
    private IEnumerable<Customer> _customers = new List<Customer>();

    protected override async Task OnInitializedAsync()
    {
        //_editCustomerCommand = new BindingCommand(EditCustomerCommand_Executed);
        await GetCustomer();
    }

    private async Task GetCustomer()
    {
        _customers = await CustomerService.List();
    }

    private async void EditCustomer(int customerId)
    {
        Customer putCustomer = _customers.FirstOrDefault(c => c.CustomerId == customerId);
        await CustomerService.Update(putCustomer);
        Snackbar.Add($"Customer Id {putCustomer?.CustomerId} updated!", Severity.Info);
        await GetCustomer();
    }
    
    // private async void EditCustomerCommand_Executed(object parameter)
    // {
    //     var putCustomer = (Customer)parameter;
    //     await CustomerService.Update(putCustomer);
    //     Snackbar.Add($"Customer Id {putCustomer.CustomerId} updated!");
    //     await GetCustomer();
    // }
    
    private bool FilterFunc(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (customer.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.EmailAddress.Contains(_searchString))
            return true;
        return false;
    }
}
